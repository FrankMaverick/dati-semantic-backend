openapi: 3.0.1
info:
  title: NDC Semantic Backend
  version: 0.0.1
  description: |-
    NDC Semantic Backend
  termsOfService: /tos
  contact:
    name: NDC Semantic Backend
    email: info@teamdigitale.governo.it
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  x-api-id: 000-000-000
  x-summary: NDC Semantic Backend
tags:
  - name: vocabulary-data
    description: Entry point for Vocabulary related data
  - name: application-status
  - name: semantic-assets
servers:
  - url: https://schema.gov.it
    description: Public server
paths:
  "/vocabularies/{agency_id}/{key_concept}":
    get:
      security: []
      tags:
        - vocabulary-data
      operationId: fetchVocabularyData
      description: Retrieves the (paginated) items of a Controlled Vocabulary.
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UrlToken"
        - name: key_concept
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UrlToken"
        - name: offset
          in: query
          required: false
          schema:
            maximum: 30000
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            maximum: 200
            minimum: 1
            format: int32
            default: 10
      responses:
        "200":
          description: A list of items from the specified vocabulary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VocabularyData"
        "404":
          description: The vocabulary cannot be found
          content:
            "application/problem+json":
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad input parameters
          content:
            "application/problem+json":
              schema:
                $ref: "#/components/schemas/Problem"

  "/vocabularies/{agency_id}/{key_concept}/{id}":
    get:
      security: []
      tags:
        - vocabulary-data
      operationId: fetchVocabularyItem
      description: Retrieves one item from a Controlled Vocabulary, based on its id.
      parameters:
        - name: agency_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UrlToken"
        - name: key_concept
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UrlToken"
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "404":
          description: The vocabulary or the item cannot be found
          content:
            "application/problem+json":
              schema:
                $ref: "#/components/schemas/Problem"

  /status:
    get:
      security: []
      tags:
        - application-status
      operationId: getStatus
      description: Service status
      responses:
        '200':
          description: OK
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /semantic-assets:
    get:
      security: []
      tags:
        - semantic-assets
      operationId: search
      description: Search across the catalog for semantic assets, based on the provided criteria.
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
            default: ''
        - name: offset
          in: query
          required: false
          schema:
            maximum: 30000
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: type
          in: query
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
            default: [ ]
        - name: theme
          in: query
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
            default: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResult"
  /semantic-assets/by-iri:
    get:
      security: []
      tags:
        - semantic-assets
      operationId: getDetails
      description: Retrieves the details of a semantic asset.
      parameters:
        - name: iri
          in: query
          required: true
          schema:
            type: string
            format: uri
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SemanticAssetDetailsDto"
components:
  schemas:
    VocabularyData:
      type: object
      properties:
        totalResults:
          type: integer
          format: int64
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        data:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
    NodeSummary:
      type: object
      properties:
        iri:
          type: string
        summary:
          type: string
    SearchResult:
      type: object
      properties:
        totalCount:
          type: integer
          format: int64
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: "#/components/schemas/SearchResultItem"
    SearchResultItem:
      type: object
      properties:
        assetIri:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/AssetType"
        modifiedOn:
          type: string
          format: date
        versionInfo:
          type: string
        themes:
          type: array
          items:
            type: string
        rightsHolder:
          $ref: "#/components/schemas/NodeSummary"
    SemanticAssetDetailsDto:
      type: object
      properties:
        assetIri:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/AssetType"
        modifiedOn:
          type: string
          format: date
        themes:
          type: array
          items:
            type: string
        rightsHolder:
          $ref: "#/components/schemas/NodeSummary"
        accrualPeriodicity:
          type: string
        distributionUrls:
          type: array
          items:
            type: string
        subjects:
          type: array
          items:
            type: string
        contactPoint:
          $ref: "#/components/schemas/NodeSummary"
        publishers:
          type: array
          items:
            $ref: "#/components/schemas/NodeSummary"
        creators:
          type: array
          items:
            $ref: "#/components/schemas/NodeSummary"
        versionInfo:
          type: string
        issuedOn:
          type: string
          format: date
        languages:
          type: array
          items:
            type: string
        temporal:
          type: string
        conformsTo:
          type: array
          items:
            $ref: "#/components/schemas/NodeSummary"
        keyConcept:
          type: string
        endpointUrl:
          type: string
        keyClasses:
          type: array
          items:
            $ref: "#/components/schemas/NodeSummary"
        prefix:
          type: string
        projects:
          type: array
          items:
            $ref: "#/components/schemas/NodeSummary"
    AssetType:
      type: string
      enum:
        - ONTOLOGY
        - CONTROLLED_VOCABULARY
        - SCHEMA
    UrlToken:
      type: string
      pattern: ^\w[^\s]{0,64}$
    Problem:
      type: object
      properties:
        title:
          type: string
          description: Human readable description of the issue
        type:
          type: string
          format: uri
          description: Unique identifier of the type of issue
        status:
          type: integer
          format: int32
          minimum: 100
          maximum: 599
          description: Same as returned Http Status code
        timestamp:
          type: string
          description: Timestamp for debugging purposes


